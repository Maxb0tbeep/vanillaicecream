"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
var assert_1 = __importDefault(require("assert"));
var colorLookupNames = {
    '0': 'black',
    '1': 'dark_blue',
    '2': 'dark_green',
    '3': 'dark_aqua',
    '4': 'dark_red',
    '5': 'dark_purple',
    '6': 'gold',
    '7': 'gray',
    '8': 'dark_gray',
    '9': 'blue',
    'a': 'green',
    'b': 'aqua',
    'c': 'red',
    'd': 'light_purple',
    'e': 'yellow',
    'f': 'white',
    'g': 'minecoin_gold'
};
var formattingLookupProperties = {
    'k': 'obfuscated',
    'l': 'bold',
    'm': 'strikethrough',
    'n': 'underline',
    'o': 'italics'
};
var parseText = function (text, options) {
    var _a;
    var result = [{ text: '', color: 'white' }];
    var position = 0;
    while (position + 1 < text.length) {
        var char = text.charAt(position);
        if (char === options.formattingCharacter) {
            var formattingCode = text.charAt(position + 1).toLowerCase();
            var item = result[result.length - 1];
            if (formattingCode === 'r') {
                result.push({ text: '', color: 'white' });
            }
            else {
                if (formattingCode in formattingLookupProperties) {
                    if (item.text.length > 0) {
                        result.push(__assign(__assign({}, item), (_a = { text: '' }, _a[formattingLookupProperties[formattingCode]] = true, _a)));
                    }
                    else {
                        item[formattingLookupProperties[formattingCode]] = true;
                    }
                }
                else if (formattingCode in colorLookupNames) {
                    result.push({ text: '', color: colorLookupNames[formattingCode] });
                }
            }
            position += 2;
        }
        else {
            result[result.length - 1].text += char;
            position++;
        }
    }
    return result;
};
var parseChat = function (chat, options, parent) {
    var result = parseText(chat.text, options);
    var item = result[0];
    if (((parent && parent.bold) && !chat.bold) || chat.bold) {
        item.bold = true;
    }
    if (((parent && parent.italic) && !chat.italic) || chat.italic) {
        item.italics = true;
    }
    if (((parent && parent.underlined) && !chat.underlined) || chat.underlined) {
        item.underline = true;
    }
    if (((parent && parent.strikethrough) && !chat.strikethrough) || chat.strikethrough) {
        item.strikethrough = true;
    }
    if (((parent && parent.obfuscated) && !chat.obfuscated) || chat.obfuscated) {
        item.obfuscated = true;
    }
    if (chat.color) {
        if (Object.keys(colorLookupNames).includes(chat.color)) {
            item.color = colorLookupNames[chat.color];
        }
        else {
            item.color = chat.color;
        }
    }
    if (chat.extra) {
        for (var _i = 0, _a = chat.extra; _i < _a.length; _i++) {
            var extra = _a[_i];
            result.push.apply(result, parseChat(extra, options, chat));
        }
    }
    return result;
};
exports.parse = function (input, options) {
    assert_1.default(typeof input === 'string' || typeof input === 'object', "Expected 'input' to be typeof 'string' or 'object', received '" + typeof input + "'");
    var opts = Object.assign({
        formattingCharacter: '\u00A7'
    }, options);
    var result;
    if (typeof input === 'string') {
        result = parseText(input, opts);
    }
    else {
        result = parseChat(input, opts).filter(function (item) { return item.text.length > 0; });
    }
    return result.filter(function (item) { return item.text.length > 0; });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGFyc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxrREFBNEI7QUFHNUIsSUFBTSxnQkFBZ0IsR0FBMkI7SUFDN0MsR0FBRyxFQUFFLE9BQU87SUFDWixHQUFHLEVBQUUsV0FBVztJQUNoQixHQUFHLEVBQUUsWUFBWTtJQUNqQixHQUFHLEVBQUUsV0FBVztJQUNoQixHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxhQUFhO0lBQ2xCLEdBQUcsRUFBRSxNQUFNO0lBQ1gsR0FBRyxFQUFFLE1BQU07SUFDWCxHQUFHLEVBQUUsV0FBVztJQUNoQixHQUFHLEVBQUUsTUFBTTtJQUNYLEdBQUcsRUFBRSxPQUFPO0lBQ1osR0FBRyxFQUFFLE1BQU07SUFDWCxHQUFHLEVBQUUsS0FBSztJQUNWLEdBQUcsRUFBRSxjQUFjO0lBQ25CLEdBQUcsRUFBRSxRQUFRO0lBQ2IsR0FBRyxFQUFFLE9BQU87SUFDWixHQUFHLEVBQUUsZUFBZTtDQUN2QixDQUFDO0FBRUYsSUFBTSwwQkFBMEIsR0FBeUM7SUFDckUsR0FBRyxFQUFFLFlBQVk7SUFDakIsR0FBRyxFQUFFLE1BQU07SUFDWCxHQUFHLEVBQUUsZUFBZTtJQUNwQixHQUFHLEVBQUUsV0FBVztJQUNoQixHQUFHLEVBQUUsU0FBUztDQUNqQixDQUFDO0FBRUYsSUFBTSxTQUFTLEdBQUcsVUFBQyxJQUFZLEVBQUUsT0FBcUI7O0lBQ2xELElBQU0sTUFBTSxHQUFnQixDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUUzRCxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFFakIsT0FBTyxRQUFRLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDL0IsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFR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